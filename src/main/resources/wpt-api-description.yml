openapi: 3.0.3
info:
  title: Swagger IPWY - OpenAPI 3.0
  description: |-
    Ceci est la sp√©cification de l'API WePlayedTogether (WPT)
    
    Liens utiles :
    - [WPT repo](https://github.com/wpt)
  termsOfService: http://swagger.io/terms/
  contact:
    email: alexandre.barbez@gmail.com
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.11
servers:
  - url: https://wpt.swagger.io/api/v3
tags:
  - name: character
    description: Manage characters
  - name: user
    description: Manage users
  - name: relation
    description: Manage relations
paths:
  /character:
    put:
      tags:
        - character
      summary: Update an existing character
      description: Update an existing character by Id
      operationId: updatecharacter
      requestBody:
        description: Update an existent character
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Character'
          application/xml:
            schema:
              $ref: '#/components/schemas/Character'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Character'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Character'
            application/xml:
              schema:
                $ref: '#/components/schemas/Character'
        '400':
          description: Invalid ID supplied
        '404':
          description: Character not found
        '422':
          description: Validation exception
      security:
        - character_store_auth:
            - write:character
            - read:character
    post:
      tags:
        - character
      summary: Add a new character to the store
      description: Add a new character to the store
      operationId: addcharacter
      requestBody:
        description: Create a new character in the store
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Character'
          application/xml:
            schema:
              $ref: '#/components/schemas/Character'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Character'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Character'
            application/xml:
              schema:
                $ref: '#/components/schemas/Character'
        '400':
          description: Invalid input
        '422':
          description: Validation exception
      security:
        - characterstore_auth:
            - write:character
            - read:character
  /character/findByPseudo:
    get:
      tags:
        - character
      summary: Finds characters by pseudo
      description: Multiple pseudodym values can be provided with comma separated strings
      operationId: findcharactersByPseudo
      parameters:
        - name: pseudo
          in: query
          description: Pseudo values that need to be considered for filter
          required: false
          explode: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Character'
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Character'
        '400':
          description: Invalid status value
      security:
        - characterstore_auth:
            - write:character
            - read:character
  /character/{characterId}:
    get:
      tags:
        - character
      summary: Find character by ID
      description: Returns a single character
      operationId: getcharacterById
      parameters:
        - name: characterId
          in: path
          description: ID of character to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Character'
            application/xml:
              schema:
                $ref: '#/components/schemas/Character'
        '400':
          description: Invalid ID supplied
        '404':
          description: character not found
      security:
        - api_key: []
        - characterstore_auth:
            - write:character
            - read:character
    post:
      tags:
        - character
      summary: Updates a character in the store with form data
      description: ''
      operationId: updatecharacterWithForm
      parameters:
        - name: characterId
          in: path
          description: ID of character that needs to be updated
          required: true
          schema:
            type: integer
            format: int64
        - name: name
          in: query
          description: Name of character that needs to be updated
          schema:
            type: string
        - name: pseudo
          in: query
          description: Pseudonyms of character that needs to be updated
          schema:
            type: string
      responses:
        '400':
          description: Invalid input
      security:
        - characterstore_auth:
            - write:character
            - read:character
    delete:
      tags:
        - character
      summary: Deletes a character
      description: delete a character
      operationId: deletecharacter
      parameters:
        - name: api_key
          in: header
          description: ''
          required: false
          schema:
            type: string
        - name: characterId
          in: path
          description: character id to delete
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '400':
          description: Invalid character value
      security:
        - characterstore_auth:
            - write:character
            - read:character
  /user:
    post:
      tags:
        - user
      summary: Create user
      description: This can only be done by the logged in user.
      operationId: createUser
      requestBody:
        description: Created user object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
          application/xml:
            schema:
              $ref: '#/components/schemas/User'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        default:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
  /user/createWithList:
    post:
      tags:
        - user
      summary: Creates list of users with given input array
      description: Creates list of users with given input array
      operationId: createUsersWithListInput
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/User'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
        default:
          description: successful operation
  /user/login:
    get:
      tags:
        - user
      summary: Logs user into the system
      description: ''
      operationId: loginUser
      parameters:
        - name: username
          in: query
          description: The user name for login
          required: false
          schema:
            type: string
        - name: password
          in: query
          description: The password for login in clear text
          required: false
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          headers:
            X-Rate-Limit:
              description: calls per hour allowed by the user
              schema:
                type: integer
                format: int32
            X-Expires-After:
              description: date in UTC when token expires
              schema:
                type: string
                format: date-time
          content:
            application/xml:
              schema:
                type: string
            application/json:
              schema:
                type: string
        '400':
          description: Invalid username/password supplied
  /user/logout:
    get:
      tags:
        - user
      summary: Logs out current logged in user session
      description: ''
      operationId: logoutUser
      parameters: []
      responses:
        default:
          description: successful operation
  /user/{username}:
    get:
      tags:
        - user
      summary: Get user by user name
      description: ''
      operationId: getUserByName
      parameters:
        - name: username
          in: path
          description: 'The name that needs to be fetched. Use user1 for testing. '
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Invalid username supplied
        '404':
          description: User not found
    put:
      tags:
        - user
      summary: Update user
      description: This can only be done by the logged in user.
      operationId: updateUser
      parameters:
        - name: username
          in: path
          description: name that need to be deleted
          required: true
          schema:
            type: string
      requestBody:
        description: Update an existent user in the store
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
          application/xml:
            schema:
              $ref: '#/components/schemas/User'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        default:
          description: successful operation
    delete:
      tags:
        - user
      summary: Delete user
      description: This can only be done by the logged in user.
      operationId: deleteUser
      parameters:
        - name: username
          in: path
          description: The name that needs to be deleted
          required: true
          schema:
            type: string
      responses:
        '400':
          description: Invalid username supplied
        '404':
          description: User not found
components:
  schemas:
    Character:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 100000
        pseudo:
          type: string
          example: khrn
        team:
          type: string
          example: Horde
        games:
          type: array
          xml:
            name: games
            wrapped: true
          items:
            $ref: '#/components/schemas/Game'
      xml:
        name: character
    Game:
      type: object
      properties:
        name:
          type: string
          example: world of warcraft
        code:
          type: string
          example: wow
        editor:
          type: string
          example: Blizzard
      xml:
        name: game
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        username:
          type: string
          example: theUser
        firstName:
          type: string
          example: John
        lastName:
          type: string
          example: James
        email:
          type: string
          example: john@email.com
        password:
          type: string
          example: '12345'
        phone:
          type: string
          example: '12345'
        userStatus:
          type: integer
          description: User Status
          format: int32
          example: 1
      xml:
        name: user
    ApiResponse:
      type: object
      properties:
        code:
          type: integer
          format: int32
        type:
          type: string
        message:
          type: string
      xml:
        name: '##default'
  requestBodies:
    UserArray:
      description: List of user object
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/User'
  securitySchemes:
    petstore_auth:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: https://wpt.swagger.io/oauth/authorize
          scopes:
            write:pets: modify characters in your account
            read:pets: read your characters
    api_key:
      type: apiKey
      name: api_key
      in: header